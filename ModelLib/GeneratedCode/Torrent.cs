//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.IO;
using System.Xml;

public class Torrent
{
    public enum eStatus
    {
        Downloading,
        Paused,
        Stopped,
        Seeding
    }


	public virtual eStatus Status
	{
		get;
		set;
	}

	public virtual object DownloadSpeed
	{
		get;
	}

	public virtual object UploadSpeed
	{
		get;
	}

	public virtual string FilePath
	{
		get;
		private set;
	}
    public virtual string FileName
    {
        get;
        private set;
    }


    public virtual object ProgressOfFile
	{
		get;
	}

	public virtual List<Client> Clients
	{
		get;
		set;
	}

    public long Size
    {
        get;
        private set;
    }
    public string Hash { get; private set; }
    public string Name { get; set; }
    private static string XmlName = "torrent";

    public XmlElement SaveToXml(XmlDocument doc)
    {
        XmlElement e = doc.CreateElement(XmlName);

        e.AppendChild(CreateElementWithValue(doc, "name", Name));
        
        e.AppendChild(CreateElementWithValue(doc, "filename", FileName));
        e.AppendChild(CreateElementWithValue(doc, "filepath", FilePath));
        e.AppendChild(CreateElementWithValue(doc, "hash", Hash));
        e.AppendChild(CreateElementWithValue(doc, "size", Size.ToString()));
        return e;
    }

    private XmlElement CreateElementWithValue(XmlDocument doc, string xmlName, string value)
    {
        XmlElement elem = doc.CreateElement(xmlName);
        elem.InnerText = value;
        return elem;
    }
    private static string hashToString(byte[] hash)
    {
        return BitConverter.ToString(hash).Replace("-", string.Empty);
    }


	public virtual void Start()
	{
		throw new System.NotImplementedException();
	}

	public virtual void Pause()
	{
		throw new System.NotImplementedException();
	}

    public static Torrent CreateFromPath(string path)
    {
        Torrent t = new Torrent();
        t.FilePath = path;
        var split = t.FilePath.Split('\\');
        t.FileName = split[split.Length - 1];
        using (var md5 = MD5.Create())
        {
            using (var stream = File.OpenRead(t.FilePath))
            {
                t.Hash = hashToString(md5.ComputeHash(stream));
            }
        }

        var fi = new FileInfo(path);
        t.Size = fi.Length;
        t.Name = t.FileName;
        return t;
    }

    public static Torrent CreateFromXml(XmlElement elem)
    {
        Torrent t = new Torrent();
        t.Name = elem["name"].InnerText;
        t.FileName = elem["filename"].InnerText;
        t.FilePath = elem["filepath"].InnerText;
        t.Hash = elem["hash"].InnerText;
        t.Size = int.Parse(elem["size"].InnerText);
        return t;
    }

}

